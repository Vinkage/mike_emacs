* Packages and modes
** doom-themes, package for colors and theme

#+BEGIN_SRC emacs-lisp
(server-start)
(use-package! doom-themes
  :custom-face
  (org-level-1 ((t (:weight bold :height 1.2))))
  (org-link ((t (:underline t :foreground "#458588"))))
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-gruvbox t)


  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  )

(setq undo-limit 80000000                          ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                             ; By default while in insert all changes are one big blob. Be more granular
      inhibit-compacting-font-caches t      ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "…")               ; Unicode ellispis are nicer than "...", and also save /precious/ space
#+END_SRC

#+RESULTS:
: …

** yasnippet, and helper functions
#+BEGIN_SRC emacs-lisp
(use-package! yasnippet
  :diminish (yas-minor-mode)
  :config
  (setq yas-snippet-dirs `(,(concat "~/.doom.d/snippets")))
  (yas-global-mode 1)
  )
(define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
#+END_SRC

#+RESULTS:
| menu-item |   | yas-expand | :filter | yas-maybe-expand-abbrev-key-filter |

*** helper functions: smart fraction

#+begin_src emacs-lisp
;; laas functions
(defun laas-wrap-previous-object (tex-command)
  "Wrap previous TeX object in TEX-COMMAND."
  (interactive)
  (let ((start (laas-identify-adjacent-tex-object)))
    (insert "} ")
    ;; (when (aref aas-transient-snippet-key (1- (length aas-transient-snippet-key)))
    ;;   (insert " "))
    (save-excursion
      (goto-char start)
      (insert (concat "\\" tex-command "{")))))

(defun aas-object-on-left-condition ()
  "Return t if there is a TeX object imidiately to the left."
  ;; TODO use `laas-identify-adjacent-tex-object'
  (and (or (<= ?a (char-before) ?z)
           (<= ?A (char-before) ?Z)
           (<= ?0 (char-before) ?9)
           (memq (char-before) '(?\) ?\] ?})))
       (texmathp)))

(defvar laas-accent-snippets
  `(:cond ,#'aas-object-on-left-condition
    .
    ,(cl-loop for (key . exp) in '((". " . "dot")
                                  (".. " . "dot")
                                  (",." . "vec")
                                  (".," . "vec")
                                  ("~ " . "tilde")
                                  ("hat" . "hat")
                                  ("bar" . "overline"))
             collect :expansion-desc
             collect (format "Wrap in \\%s{}" exp)
             collect key
             ;; re-bind exp so its not changed in the next iteration
             collect (let ((expp exp)) (lambda () (interactive)
                                         (laas-wrap-previous-object expp)))))
  "A simpler way to apply accents. Expand If LaTeX symbol immidiately before point.")

(defun laas-identify-adjacent-tex-object (&optional point)
  "Return the startig position of the left-adjacent TeX object from POINT."
  (save-excursion
    (goto-char (or point (point)))
    (cond
     ((memq (char-before) '(?\) ?\]))
      (backward-sexp)
      (point))
     ((= (char-before) ?})
      (save-excursion
        (cl-loop do (backward-sexp)
                 while (= (char-before) ?}))
        ;; try to catch the marco if the braces belong to one
        (if (looking-back "\\\\[A-Za-z@*]+" (line-beginning-position))
            (match-beginning 0)
          (point))))
     ((or (<= ?a (char-before) ?z)
          (<= ?A (char-before) ?Z)
          (<= ?0 (char-before) ?9))
      (backward-word)
      (when (= (char-before) ?\\) (backward-char))
      (when (or (= (char-before) ?_)
                (= (char-before) ?^))
        (backward-char)
        (goto-char (laas-identify-adjacent-tex-object))) ; yay recursion
      (point)))))

(defun laas-smart-fraction ()
  "Expansion function used for auto-subscript snippets."
  (interactive)
  (let* ((tex-obj (laas-identify-adjacent-tex-object))
         (start (save-excursion
                  ;; if bracketed, delete outermost brackets
                  (if (memq (char-before) '(?\) ?\]))
                      (progn
                        (backward-delete-char 1)
                        (goto-char tex-obj)
                        (delete-char 1))
                    (goto-char tex-obj))
                  (point)))
         (end (point))
         (content (buffer-substring-no-properties start end)))
    (yas-expand-snippet (format "\\frac{%s}{$0} <++>" content)
                        start end))
  (laas--shut-up-smartparens))
#+end_src

*** helper functions: jump with space

#+begin_src emacs-lisp
(defcustom placeholder-string "<++>"
  "Placeholder string. Pick a string unlikely to appear in your buffers.")

(defun placeholder-forward (count)
  "Delete the next COUNTth occurrence of the placeholder string,
leaving point there ready for insertion. If called again
immediately after, it will restore that occurence of the
placeholder and move to the next."
  (interactive "p")
  (let ((n (length placeholder-string)))
    ;; (when (eq last-command 'placeholder)
    ;;   (insert placeholder-string)
    ;;   (when (< count 0) (backward-char n)))
    (search-forward placeholder-string nil nil count)
    (delete-char (if (> count 0) (- n) n))
    (setq this-command 'placeholder)))

(defun placeholder-backward (count)
  "Delete the previous COUNTth occurrence of the placeholder string,
leaving point there ready for insertion. If called again
immediately after, it will restore that occurence of the
placeholder and move to the previous."
  (interactive "p")
  (placeholder-forward (- count)))
#+end_src

** org, org-config

#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-image-actual-width '(400)
        org-clock-persist 'history
        org-highlight-latex-and-related '(latex script entities)
        org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS"
        ispell-dictionary "en-custom"
        org-startup-folded t
        org-startup-indented t
        org-superstar-headline-bullets-list '(" ") ;; no bullets, needs org-bullets package
        org-ellipsis "..." ;; folding symbol
        org-hide-emphasis-markers t
        org-fontify-quote-and-verse-blocks t
        org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "STRT(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)"))
        org-log-done t
        org-agenda-timegrid-use-ampm t
        org-agenda-start-with-log-mode t
        org-agenda-files '("/Users/mike/Dropbox/brain_dump/org/daily")
        org-agenda-file-regexp "\\`[^.].*\\.org\\'"
        org-attach-id-dir "/Users/mike/Dropbox/brain_dump/org/images"
        )
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
  (evil-org-agenda-mode)
  )
#+end_src

#+RESULTS:
: t

** super-agenda, organised todo list by tag

#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode)
  (define-key org-super-agenda-header-map (kbd "j") nil)
  (define-key org-super-agenda-header-map (kbd "k") nil)
  )

(add-to-list 'org-modules 'org-habit)
(require 'org-habit)
(setq org-habit-following-days 7)
(setq org-habit-preceding-days 35)
(setq org-habit-show-habits t)
(setq org-log-into-drawer t)
(setq org-agenda-start-day "+0d")
(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)
                         (:discard (:tag ("Chore" "Routine" "Daily" "Habit")))))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 1)
                          (:name "Started"
                           :todo "STRT"
                           :order 1)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Exercises"
                           :tag "Exercises"
                           :order 8)
                          (:name "Lectures"
                           :tag "Lectures"
                           :order 8)
                          (:name "Waiting on"
                           :todo "WAIT"
                           :order 5)
                          (:name "Holding"
                           :todo "HOLD"
                           :order 5)
                          (:name "Projects"
                           :tag "Projects"
                           :todo "PROJ"
                           :order 9)
                          (:name "Reading List"
                           :tag "Read"
                           :order 8)
                          (:name "Blog"
                           :tag "Blog"
                           :order 12)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
#+end_src

** calfw, org mode calendar view

#+begin_src emacs-lisp
(require 'calfw)
(require 'calfw-org)
(setq cfw:org-overwrite-default-keybinding nil)
#+end_src

#+RESULTS:
: t

** org-gcal, fetch google calendar events

#+begin_src emacs-lisp
(use-package! org-gcal
  :after org
  :config
  (setq org-gcal-client-id "382803836955-n22brg2iq0a35df9pi9nq9c3p1frgk1f.apps.googleusercontent.com"
        org-gcal-client-secret "egUOvADZg64PAdOXCxaqgbCD"
        org-gcal-file-alist '(("mike1994vink@gmail.com" . "~/Dropbox/org/main_cal.org")
                              ("5fu7ufq72i25srsh2h380hkvgov1scf3@import.calendar.google.com" . "~/Dropbox/org/uu_timetable.org"))
        org-gcal-auto-archive nil
        org-gcal-notify-p nil)

  (add-hook 'org-agenda-mode-hook 'org-gcal-fetch)
  (add-hook 'org-capture-after-finalize-hook 'org-gcal-fetch)

  ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
  )
#+end_src

** org-fancy-priorities

#+begin_src emacs-lisp
(use-package! org-fancy-priorities
; :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
   (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src

** org-roam, for the notes!

#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

** org-roam, for the notes!

#+begin_src emacs-lisp
(use-package! org-roam
  ;; :commands (org-roam-insert org-roam-find-file org-roam org-roam-show-graph)
  :init
  (setq org-roam-graph-viewer "/usr/bin/open")
  (add-to-list 'org-roam-buffer-prepare-hook (lambda () (org--latex-preview-region (point-min) (point-max))) t)
  ;; (map! :leader
  ;;     :prefix "n"
  ;;     :desc "Org-Roam-Insert" "i" #'org-roam-insert
  ;;     :desc "Org-Roam-Find"   "/" #'org-roam-find-file
  ;;     :desc "Org-Roam-Buffer" "r" #'org-roam
  ;;     :desc "Org-Roam-Show-Graph" "g" #'org-roam-show-graph)
  :config
  (org-roam-mode +1)
  (require 'org-roam-protocol)
)
#+end_src

** org-roam-server, looking at notes

#+begin_src emacs-lisp
(use-package org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))

(defun org-roam-server-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (smartparens-global-mode -1)
    (org-roam-server-mode 1)
    (shell-command (concat "open " (format "http://localhost:%d" org-roam-server-port)))
    (smartparens-global-mode 1))

;; automatically enable server-mode
;; (after! org-roam
;;   (smartparens-global-mode -1)
;;   (org-roam-server-mode)
;;   (smartparens-global-mode 1))

(setq org-roam-graph-exclude-matcher '("private" "daily"))
#+end_src
** anki-editor, make anki cards with org mode

#+begin_src emacs-lisp
(use-package! anki-editor
  :after org
  :init
  (setq-default anki-editor-use-math-jax t)
  :config
  (setq anki-editor-break-consecutive-braces-in-latex nil)
  (map!
   :v "C-A" 'anki-editor-cloze-dwim
   )

  )
#+end_src

** ox-gfm, github flavored markdown export

#+begin_src emacs-lisp
(eval-after-load "org"
  '(require 'ox-gfm nil t))
#+end_src

#+RESULTS:
: t

** ox-hugo, publish org files to website

#+begin_src emacs-lisp
(use-package! ox-hugo)
#+end_src

* Global settings and functions
** open size and smartparenthesis

#+BEGIN_SRC emacs-lisp
;;; Nice size for the default window
(defun get-default-height ()
       (/ (- (display-pixel-height) 120)
          (frame-char-height)))

(add-to-list 'default-frame-alist '(width . 140))
(add-to-list 'default-frame-alist (cons 'height (get-default-height)))

(after! smartparens
  (smartparens-global-mode -1))
#+END_SRC

** global maps and random functions

#+BEGIN_SRC emacs-lisp
(map! :map (evil-emacs-state-map evil-insert-state-map evil-motion-state-map)
      "C-z" nil)

;; (use-package! key-chord
;;   :config
;;   (key-chord-mode 1)
;;   )

;; (after! key-chord
;;   (key-chord-define-global "  " 'my/jump-map)
;;   )

(defun my/jump ()
  (interactive)
  (delete-char -1)
  (placeholder-forward 1)
  )

(defun my/jump-map ()
  (interactive)
  (if (string= (string (preceding-char)) " ")
      (my/jump)
    (if (yas-maybe-expand-abbrev-key-filter "yes") (+org-yas-expand-maybe-h) (insert " "))
    )
  )


(map!
 :i "SPC" 'my/jump-map
 :i "C-q" 'ace-window
 :i "C-;" 'org-latex-preview
 :n "C-q" 'ace-window
 :n "C-l" 'org-latex-preview
 )

(map! :leader
      :desc "Code buffer with session"
      "m;" #'org-babel-switch-to-session-with-code
)

(defun my/eval-py-function ()
  (interactive)
  )

(defun my/eval-py-region ()
  (interactive)
  )

(defun knitr/Buffer ()
  "Sends render command to the ess process buffer."
  (interactive)
  (ess-execute (concat "rmarkdown::render('" (buffer-file-name) "')") 'buffer)
  )

(with-eval-after-load 'evil-maps
    (define-key evil-insert-state-map (kbd "C-c") 'evil-force-normal-state))
#+END_SRC

** open in the same workspace with emacsclient

#+BEGIN_SRC emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+END_SRC

#+RESULTS:
: main
